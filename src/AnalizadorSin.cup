import java_cup.runtime.*;
import java.util.LinkedList;

parser code
{:
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido.");
    }
:}

action code
{:
Main m = new Main();
int n = 0;
int nc = -1;
int nd=0;
:}

terminal  acarpeta, aestructura, adirectorio, aformato, anombre, adocumento, acontenido, ccarpeta, cestructura, cdirectorio, cformato, cnombre, cdocumento, ccontenido;

terminal String palabra, esstring;

non terminal INICIAL, CON, CAR, NCAR, DCTO, ES, E, DIR, CARREC;

start with INICIAL;

INICIAL ::= ES;

ES ::= E ES
      |E ;

E ::= aestructura {: m.EstructuraTotal.add(new NodoEstructura(null, null, null)); :} CON
      cestructura {: n++; nc =-1 ;  :};

DIR ::= adirectorio
        palabra:pal  {:  m.EstructuraTotal.set(n, new NodoEstructura(pal ,new LinkedList<NodoCarpeta>() , new LinkedList<NodoDocumento>() )); :}
        cdirectorio;

DCTO ::=   adocumento {: if(nc==-1){m.EstructuraTotal.get(n).getEdocumentos().add(new NodoDocumento(null, null, null));}
                        else{m.EstructuraTotal.get(n).getEcarpetas().get(nc).getdocumentos().add(new NodoDocumento(null, null, null));} :}
           anombre palabra:nom
           cnombre
           aformato palabra:forma
           cformato
           acontenido esstring:st
           ccontenido
           cdocumento {:if(nc==-1){m.EstructuraTotal.get(n).getEdocumentos().set(nd,  new NodoDocumento(nom, forma, st));}
                        else{m.EstructuraTotal.get(n).getEcarpetas().get(nc).getdocumentos().set(nd, new NodoDocumento(nom, forma, st));}
                        nd++; :};


CAR::= acarpeta  {: m.EstructuraTotal.get(n).getEcarpetas().add(new NodoCarpeta(null, new LinkedList<NodoDocumento>(), new LinkedList<NodoCarpeta>())); nd = 0; nc++; :}  CARREC
       ccarpeta  {: nc--; nd = 0;  :} ;

NCAR ::= anombre
         palabra:pal  {: m.EstructuraTotal.get(n).getEcarpetas().get(nc).setcnombre(pal); :}
         cnombre ;

CARREC ::= NCAR CARREC
        |  CAR
        |  CAR CARREC
        |  DCTO CARREC
        |  DCTO;


CON ::= DIR CAR CON
    |   DCTO CON
    |   DCTO
    |   DIR CAR;


